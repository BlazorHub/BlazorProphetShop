@page "/"
@page "/proizvodi"
@inject IProductRepository productRepository
@inject IDisplayToast displayToast
@inject NavigationManager navigationManager

@using System.Text.Json

<AuthorizeView Roles="Manager">
    <Authorized>
        <div class="d-flex w-100 justify-content-end">
            <RadzenButton Click="@((args) => navigationManager.NavigateTo("proizvodi/novi"))" Text="Novi proizvod" Icon="note_add" Style="width: 200px" />
        </div>
    </Authorized>
</AuthorizeView>

<div class="row mt-2">
    @if (Products != null)
    {
        @foreach (var p in Products)
        {
            <div class="col-3 mb-2">
                <ProductCard Product="p" AddProductToCart="AddToCart" DeleteProduct="DeleteProduct" />
            </div>
        }
    }
    else
    {
        <p>Učitavam proizvode...</p>
    }
</div>


@code {
    [CascadingParameter] OrderState Order { get; set; }
    public List<ProductViewModel> Products { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FetchMovies();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task FetchMovies()
    {
        Products = await productRepository.GetAll();
    }

    private void AddToCart(ProductViewModel vm)
    {
        Order.CustomerId = 1;
        Order.OrderProduct.Add(new OrderProductSubmitDTO
        {
            ProductId = vm.Id,
            Quantity = 1,
            Value = vm.Value
        });
    }

    private async Task DeleteProduct(int productId)
    {
        await productRepository.Delete(productId);
        await displayToast.Show("Proizvod je uspješno izbrisan!", "success");
    }
}
